<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <!-- <parent>
    <groupId>org.jboss.eclipse.dd</groupId>
    <artifactId>hibernate-micro</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>-->
  <artifactId>hibernate-micro-business-tier</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <groupId>org.jboss.eclipse.dd</groupId>
  <name>Hibernate Business Tier Microservice</name>
  <packaging>ejb</packaging>
  
  <properties>
        <!-- Explicitly declaring the source encoding eliminates the following message: -->
        <!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered 
            resources, i.e. build is platform dependent! -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- JBoss dependency versions -->

        <version.jboss.maven.plugin>7.4.Final</version.jboss.maven.plugin>
        
        <!-- Define the version of the JBoss BOMs we want to import to specify tested stacks. -->
        <version.jboss.bom.eap>6.4.0.GA</version.jboss.bom.eap>

        <version.jboss.as>7.5.0.Final-redhat-21</version.jboss.as>

        <!-- other plugin versions -->
        <version.war.plugin>2.1.1</version.war.plugin>

        <!-- maven-compiler-plugin -->
        <maven.compiler.target>1.6</maven.compiler.target>
        <maven.compiler.source>1.6</maven.compiler.source>
        
        <ejb.plugin.version>2.3</ejb.plugin.version>
		<version.compiler.plugin>2.3.1</version.compiler.plugin>
    </properties>
    
    <dependencyManagement>
        <dependencies>
            <!-- JBoss distributes a complete set of Java EE 6 APIs including 
                a Bill of Materials (BOM). A BOM specifies the versions of a "stack" (or 
                a collection) of artifacts. We use this here so that we always get the correct 
                versions of artifacts. Here we use the jboss-javaee-6.0-with-hibernate stack 
                (you can read this as the JBoss stack of the Java EE Web Profile 6 APIs with 
                extras from the Hibernate family of projects) -->
            <dependency>
                <groupId>org.jboss.bom.eap</groupId>
                <artifactId>jboss-javaee-6.0-with-hibernate</artifactId>
                <version>${version.jboss.bom.eap}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>

        <!-- First declare the APIs we depend on and need for compilation. 
            All of them are provided by JBoss EAP 6 -->

        <!-- Import the CDI API, we use provided scope as the API is included in JBoss EAP 6 -->
        <dependency>
            <groupId>javax.enterprise</groupId>
            <artifactId>cdi-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Import the Common Annotations API (JSR-250), we use provided 
            scope as the API is included in JBoss EAP 6 -->
        <dependency>
            <groupId>org.jboss.spec.javax.annotation</groupId>
            <artifactId>jboss-annotations-api_1.1_spec</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Import the JPA API, we use provided scope as the API is included in JBoss EAP 6 -->
        <dependency>
            <groupId>org.hibernate.javax.persistence</groupId>
            <artifactId>hibernate-jpa-2.0-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Import the EJB API, we use provided scope as the API is included in JBoss EAP 6 -->
        <dependency>
            <groupId>org.jboss.spec.javax.ejb</groupId>
            <artifactId>jboss-ejb-api_3.1_spec</artifactId>
            <scope>provided</scope>
        </dependency>


        <!--Import dependencies to hibernate packages(eg. hibernate-core) 
            depending on features you want to use like Hibernate Session used in the 
            quickstart -->
        <!--please note that scope is provided as these jars are shipped 
            with as7 -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <scope>provided</scope>
        </dependency>
        
        
        <!-- JSR-303 (Bean Validation) Implementation -->
        <!-- Provides portable constraints such as @Email -->
        <!-- Hibernate Validator is shipped in JBoss EAP 6 -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <scope>provided</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

    </dependencies>
    
    <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
        	<plugin>
        		<artifactId>maven-compiler-plugin</artifactId>
        		<version>${version.compiler.plugin}</version>
        		<configuration>
        			<source>${maven.compiler.source}</source>
        			<target>${maven.compiler.target}</target>
        		</configuration>
        	</plugin>
        	
        	
            <plugin>  <!--  must include ejb-plugin to change the EJB version from 2.1 to 3.1 -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-ejb-plugin</artifactId>
                <version>${ejb.plugin.version}</version>
                <configuration>
                    <ejbVersion>3.1</ejbVersion>
                    <generateClient>false</generateClient>                    
                    <archive>
                        <addMavenDescriptor>false</addMavenDescriptor>
                    </archive>
                </configuration>
            </plugin>
        </plugins>
     </build>
  
</project>
